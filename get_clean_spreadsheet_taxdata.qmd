---
format: html
editor-options: 
  chunk-output-type: console
---

# Download and save spreadsheet tax data

## Setup

```{r}
#| label: setup

source(here::here("r", "libraries.r"))
source(here::here("r", "libraries_ts.r"))
# source(here::here("r", "constants.r"))
# source(here::here("r", "functions.r"))

```

```{=html}
<!-- links

Tax Dept montly data on OpenData
https://data.ny.gov/Government-Finance/New-York-State-Local-and-Local-Purpose-Taxes-and-F/2vni-8tmb

Contact: OTPA.OpenNYData@tax.ny.gov

Spreadsheets with monthly collections:
https://www.tax.ny.gov/research/collections/monthly_tax_collections.htm
-->
```

## Spreadsheet data

```{r}
#| label: ONETIME-spreadsheet-downloads
#| eval: false
#| include: false

# landing page:
#   https://www.tax.ny.gov/research/collections/monthly_tax_collections.htm

# https://www.tax.ny.gov/research/collections/february-2023-tax-collections.xls

# create bulk filenames

# representative file names for each fiscal year: ----

# 2024
# march 2024
# https://www.tax.ny.gov/research/collections/april-2023-tax-collections.xls

# 2023
#  https://www.tax.ny.gov/research/collections/march-2023-tax-collections.xls
#  https://www.tax.ny.gov/research/collections/april-2022-tax-collections.xls

# 2022
#  https://www.tax.ny.gov/research/collections/March_2022_tax_collections.xls
#  https://www.tax.ny.gov/research/collections/january_2022_tax_collections.xls
#  https://www.tax.ny.gov/research/collections/September_2021_tax_collections.xls
#  https://www.tax.ny.gov/research/collections/August_2021_tax_collections.xls
#  https://www.tax.ny.gov/research/collections/SFY21_22/July_2021_tax_collections.xls
#  https://www.tax.ny.gov/research/collections/SFY21_22/May_2021_tax_collections.xls
#  https://www.tax.ny.gov/research/collections/SFY21_22/April_2021_tax_collections.xls

# 2021
#  https://www.tax.ny.gov/research/collections/sfy20-21/March_2021_tax_collections.xls
#  https://www.tax.ny.gov/research/collections/sfy20-21/October_2020_tax_collections.xls
#  https://www.tax.ny.gov/research/collections/sfy20-21/september_2020_tax_collections.xls
#  https://www.tax.ny.gov/pdf/stats/collections/FY20-21/august_2020_tax_collections.xls
#  https://www.tax.ny.gov/pdf/stats/collections/FY20-21/july_2020_tax_collections.xls
#  https://www.tax.ny.gov/pdf/stats/collections/FY20-21/april_2020_tax_collections.xls

# 2020
#  https://www.tax.ny.gov/pdf/stats/collections/FY19_20/march_2020_tax_collections.xls
#  https://www.tax.ny.gov/pdf/stats/collections/FY19_20/april_2019_tax_collections.xls

# 2019
#  https://www.tax.ny.gov/pdf/stats/collections/FY18-19/march_2019_tax_collections.xls
#  https://www.tax.ny.gov/pdf/stats/collections/FY18-19/april_2018_tax_collections.xls

# 2018
# https://www.tax.ny.gov/pdf/stats/collections/sfy17-18/march_2018_tax_collections.xls
# https://www.tax.ny.gov/research/collections/sfy17-18/january_2018_tax_collections.xls
# https://www.tax.ny.gov/pdf/stats/collections/sfy17-18/december_2017_tax_collections.xls
# https://www.tax.ny.gov/pdf/stats/collections/november_2017_tax_collections.xls
# https://www.tax.ny.gov/pdf/stats/collections/october_2017_tax_collections.xls
# https://www.tax.ny.gov/pdf/stats/collections/sfy17-18/september_2017_tax_collections.xls
# https://www.tax.ny.gov/pdf/stats/collections/sfy17-18/april_2017_tax_collections.xls

# 2017
# https://www.tax.ny.gov/pdf/stats/collections/sfy16_17/march_2017_tax_collections.xls
# https://www.tax.ny.gov/pdf/stats/collections/sfy16_17/april_2016_tax_collections.xls

# 2016
# https://www.tax.ny.gov/pdf/stats/collections/sfy15_16/march_2016_tax_collections.xls
# https://www.tax.ny.gov/pdf/stats/collections/sfy15_16/april_2015_tax_collections.xls

# 2015
# https://www.tax.ny.gov/pdf/stats/collections/sfy14_15/march_2015_tax_collections.xls
# https://www.tax.ny.gov/pdf/stats/collections/sfy14_15/april_2014_tax_collections.xls

# 2014
# https://www.tax.ny.gov/pdf/stats/collections/sfy13_14/march_2014_tax_collections.xls
# https://www.tax.ny.gov/pdf/stats/collections/sfy13_14/april_2013_tax_collections.xls

# 2013
# https://www.tax.ny.gov/pdf/stats/collections/sfy12_13/march_2013_tax_collections.xls
# https://www.tax.ny.gov/pdf/stats/collections/sfy12_13/april_2012_tax_collections.xls

# 2012
# https://www.tax.ny.gov/pdf/stats/collections/sfy11_12/march_2012_tax_collections.xls
# https://www.tax.ny.gov/pdf/stats/collections/sfy11_12/april_2011_tax_collections.xls

# 2011
# https://www.tax.ny.gov/pdf/stats/collections/sfy10_11/march_2011_tax_collections.xls
# https://www.tax.ny.gov/pdf/stats/collections/sfy10_11/april_2010_tax_collections.xls

# 2010
# https://www.tax.ny.gov/pdf/stats/collections/sfy09_10/march_2010_tax_collections.xls
# https://www.tax.ny.gov/pdf/stats/collections/sfy09_10/april_2009_tax_collections.xls

# 2009
# https://www.tax.ny.gov/pdf/stats/collections/sfy08_09/april_2008_tax_collections.xls
# https://www.tax.ny.gov/pdf/stats/collections/sfy08_09/march_2009_tax_collections.xls

# calc https://www.tax.ny.gov/pdf/stats/collections/sfy16-17/april_2016_tax_collections.xls
# true https://www.tax.ny.gov/pdf/stats/collections/sfy16_17/april_2016_tax_collections.xls

geturl <- function(date) {
  # date <- as.Date(date)
  year <- year(date)
  month <- month(date)
  fyear <- ifelse(month < 4, year, year + 1)

  ystart <- str_sub(fyear - 1, 3, 4)
  yend <- str_sub(fyear, 3, 4)

  # parts to the url base (before the file name)
  urlstart <- "https://www.tax.ny.gov/"

  urlmid <- case_when(
    # put exceptions at the top
    date %in% as.Date("2018-01-01") ~ "research/collections/",

    date >= "2008-04-01" &
      date <= "2020-08-01" ~
      "pdf/stats/collections/",

    date >= "2020-09-01" &
      date <= "2024-03-01" ~
      "research/collections/",

    TRUE ~ "ERROR"
  )

  fyfolder <- case_when(
    # put the major exceptions first so they bypass other steps

    date >= "2021-08-01" &
      date <= "2024-03-01" ~
      "",

    date %in% as.Date(c("2017-10-01", "2017-11-01")) ~ "",

    # now give rules for fiscal years
    date >= "2008-04-01" &
      date <= "2017-03-01" ~
      paste0("sfy", ystart, "_", yend, "/"),

    date >= "2017-04-01" &
      date <= "2018-03-01" ~
      paste0("sfy", ystart, "-", yend, "/"),

    date >= "2018-04-01" &
      date <= "2019-03-01" ~
      paste0("FY", ystart, "-", yend, "/"),

    date >= "2019-04-01" &
      date <= "2020-03-01" ~
      paste0("FY", ystart, "_", yend, "/"),

    date >= "2020-04-01" &
      date <= "2020-08-01" ~
      paste0("FY", ystart, "-", yend, "/"),

    date >= "2020-09-01" &
      date <= "2021-03-01" ~
      paste0("sfy", ystart, "-", yend, "/"),

    date >= "2021-04-01" &
      date <= "2021-07-01" ~
      paste0("SFY", ystart, "_", yend, "/"),

    TRUE ~ "ERROR"
  )

  mname <- month.name[month]

  # fname <- paste0(mname, "_", year, "_tax_collections.xls")
  ftype <- ifelse(date <= "2023-07-01", "xls", "xlsx")
  fname <- paste0(mname, "_", year, "_tax_collections.", ftype)

  fname <- ifelse(date >= "2022-04-01", str_replace_all(fname, "_", "-"), fname)

  fname <- case_when(
    # exceptions first
    # date == as.Date("2022-04-01") ~ "april-2022_tax_collections.xls", # WOW - dash and underscore

    date %in%
      as.Date(c("2022-01-01")) |
      (date < "2020-10-01") |
      (date > "2022-03-01") ~
      str_to_lower(fname),

    TRUE ~ fname
  )

  paste0(urlstart, urlmid, fyfolder, fname)
}


f <- function(date) {
  url <- geturl(date)
  fn <- path_file(url)
  print(date)
  print(fn)
  fpath <- path(here::here("data", "dtf", "bulk", fn))
  print(fpath)
  download.file(url, destfile = fpath, mode = "wb")
  print("    ----    ")
}

# dates <- seq.Date(as.Date("2008-04-01"), as.Date("2023-03-01"), "1 month")
dates <- seq.Date(as.Date("2023-07-01"), as.Date("2023-09-01"), "1 month")

purrr::walk(dates, f)
# purrr::walk(dates[1:36], f)

# f(as.Date("2022-05-01"))
#
# dates <- seq.Date(as.Date("2017-04-01"), as.Date("2023-03-01"), "1 month")
# geturl(dates[1])

```

```{r}
#| label: ONETIME-read-spreadsheets
#| eval: false
#| include: false

dir <- path(here::here("data", "dtf", "bulk"))
dir_ls(dir)

files <- dir_ls(dir) |> path_file()
files

filedf <- tibble(path = dir_ls(dir)) |>
  mutate(file = path_file(path)) |>
  separate(
    file,
    into = c("month_name", "year"),
    remove = FALSE,
    extra = "drop"
  ) |>
  mutate(
    year = as.integer(year),
    month_name = str_to_lower(month_name),
    month = match(month_name, str_to_lower(month.name)),
    date = ymd(paste(year, month, "01"))
  ) |>
  mutate(sheets = purrr::map(path, excel_sheets)) |>
  select(date, year, month, month_name, file, path, sheets) |>
  arrange(date)
glimpse(filedf)
count(filedf, month, month_name)
count(filedf, year)

filedfl <- filedf |>
  unnest_wider(col = sheets, names_sep = "_") |>
  pivot_longer(
    starts_with("sheets"),
    names_to = "sheetnum",
    values_to = "sheet"
  ) |>
  mutate(sheetnum = str_extract_after_last(sheetnum, "_") |> as.integer())

count(filedfl, sheetnum, sheet)

get_fname <- function(year, month) {
  filedf |>
    filter(year == !!year, month == !!month) |>
    pull(file)
}

get_fpath <- function(year, month) {
  filedf |>
    filter(year == !!year, month == !!month) |>
    pull(path)
}

(fn <- get_fname(2022, 3))
# fpath <- path(here::here("data", "dtf", "bulk", fn))
(fpath <- get_fpath(2023, 9))
excel_sheets(fpath)
read_excel(fpath)

df <- read_excel(fpath, sheet = 1)

# get all the data in character form, raw

f <- function(date) {
  print(date)
  date <- as.Date(date)
  year <- year(date)
  month <- month(date)
  fpath <- get_fpath(year, month)
  if (date <= as.Date("2023-06-01")) {
    cnames <- c(
      "item",
      "gross",
      "refunds",
      "net",
      "junk",
      "fygross",
      "fyrefunds",
      "fynet"
    )
  } else {
    cnames <- c(
      "item",
      "gross",
      "refunds",
      "net",
      "junk",
      "junk2",
      "fygross",
      "fyrefunds",
      "fynet"
    )
  }
  df1 <- read_excel(fpath, sheet = 1, col_names = FALSE, col_types = "text")
  df2 <- df1 |>
    select(1:length(cnames)) |>
    setNames(cnames) |>
    mutate(row = row_number(), date = date, year = year, month = month) |>
    filter(!is.na(item), !is.na(fynet), fynet != "Net") |>
    filter(!if_all(c(gross, refunds, net, fygross, fyrefunds, fynet), is.na)) |>
    filter(fynet != "Monthly Gross and  Net  Tax Collections") |>
    relocate(date, year, month, row)
  df2
}

check <- f(fpath)

check <- f("2023-06-01")
check <- f("2023-08-01")
date <- "2023-09-01"
check <- f(date)
# date <- "2023-08-01"

df <- purrr:::map(filedf$date, f, .progress = TRUE)

df2 <- df |>
  list_rbind() |>
  filter(fynet != "Monthly Gross and  Net  Tax Collections") |>
  select(date:fynet) |>
  select(-junk)

saveRDS(df2, here::here("data", "monthly_raw.rds"))

```

```{r}
#| label: explore-spreadsheets
#| eval: false
#| include: false

mtax <- readRDS(here::here("data", "monthly_raw.rds"))

mtax |>
  filter(date %in% as.Date(c("2023-08-01")))

check <- count(mtax, item)

mtavars <- check |>
  filter(
    str_detect(item, "M.C.T.") |
      str_detect(item, "MCTM") |
      str_detect(item, "M.T.A.")
  )

mtavars

mta1 <- mtax |>
  filter(item %in% mtavars$item)

mta1 |>
  filter(date %in% as.Date(c("2023-07-01", "2023-08-01", "2023-09-01")))


pmt <- mta1 |>
  filter(str_detect(item, "Mobil")) |>
  pivot_longer(cols = gross:fynet) |>
  select(-item) |>
  mutate(value = as.numeric(value)) |>
  arrange(name, date)

pmt |>
  filter(name == "net", year >= 2010) |>
  ggplot(aes(date, value)) +
  geom_line() +
  geom_point()

```
